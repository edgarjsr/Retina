#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "retina_lexer"
require_relative "retina_ast"

class SyntacticError < RuntimeError

    def initialize(tok)
        @token = tok
    end

    def to_s
        "Syntactic error on: #{@token}"   
    end
end

class Parser < Racc::Parser

module_eval(<<'...end retina_parser.y/module_eval...', 'retina_parser.y', 283)

def on_error(id, token, stack)
    raise SyntacticError::new(token)
end
   
def next_token
    token = @lexer.catch_lexeme
    puts "esto es una prueba"
    puts "Token del next_token: #{token}"
    #puts [token.class, token.idAndValue[1]]

    return [false,false] unless token
    return [token.class,token]

end
   
def parse(lexer)
    @yydebug = true
    @lexer = lexer
    @tokens = []
    ast = do_parse
    return ast
end
...end retina_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    63,     2,    63,   112,    63,   113,    77,     7,    62,     8,
    62,   118,    62,    16,    17,    63,    79,     7,     4,     8,
    39,   136,    45,    62,    45,    56,    45,    56,    80,    56,
    58,    59,    58,    59,    58,    59,    73,    45,    78,   140,
    56,    16,    17,    16,    17,    58,    59,    63,    50,    64,
    72,    64,   143,    64,    63,    62,    92,    89,    87,    88,
    86,    81,    62,    85,    64,    45,    57,    63,    57,    45,
    57,    52,    56,    16,    17,    62,    45,    58,    59,    56,
    63,    57,    16,    17,    58,    59,    51,    63,    62,    45,
    16,    17,    56,    50,    51,    62,    64,    58,    59,    49,
    63,    45,    45,    64,   108,    56,    38,   147,    62,    45,
    58,    59,    56,    57,    37,   110,    64,    58,    59,   150,
    57,   111,    45,    45,    45,    56,    63,   154,    12,    64,
    58,    59,   156,    57,    62,   157,    64,    63,   158,    63,
    92,    89,    87,    88,    86,    62,    57,    62,    45,    64,
    11,    56,    63,    57,    10,   161,    58,    59,     9,    45,
    62,    45,    56,   163,    56,    63,    57,    58,    59,    58,
    59,    45,   165,    62,    45,    64,     5,    56,   167,   nil,
   nil,   nil,    58,    59,   nil,    63,    64,    45,    64,   nil,
    56,   nil,    57,    62,   nil,    58,    59,   nil,    63,   nil,
   nil,    64,   nil,    57,   nil,    57,    62,    45,   nil,   nil,
    56,    63,   nil,    63,    64,    58,    59,   nil,    57,    62,
    45,    62,   nil,    56,    63,   nil,   nil,   nil,    58,    59,
   nil,    57,    62,    45,    64,    45,    56,   nil,    56,   nil,
   nil,    58,    59,    58,    59,    63,    45,    64,   nil,    56,
   nil,    57,   nil,    62,    58,    59,   nil,   nil,    63,   nil,
    64,   nil,    64,   nil,    57,   nil,    62,    45,   nil,   nil,
    56,   nil,   nil,    64,    63,    58,    59,    57,    63,    57,
    45,   nil,    62,    56,   nil,   nil,    62,    48,    58,    59,
    57,   nil,   nil,   nil,    64,   nil,    45,   nil,   nil,    56,
    45,   149,   nil,    56,    58,    59,    63,    64,    58,    59,
   nil,    57,    31,   nil,    62,   nil,   nil,    63,    29,    30,
    28,   nil,   nil,    64,    57,    62,   nil,    64,    45,   nil,
   nil,    56,   nil,   nil,   nil,    68,    58,    59,   nil,    45,
    57,   nil,    56,   nil,    57,    22,   nil,    58,    59,   nil,
    16,    17,   nil,   nil,   nil,    64,    35,   nil,   nil,   nil,
    32,   nil,   nil,    34,    33,   nil,    64,   nil,   nil,   nil,
    31,   nil,    57,   nil,   nil,   nil,    29,    30,    28,   nil,
   nil,   nil,   nil,    57,    92,    89,    87,    88,    86,    90,
    91,    95,    96,    98,    97,    93,    94,    99,   100,    92,
    89,    87,    88,    86,    90,    91,    95,    96,    98,    97,
    93,    94,    99,   100,    92,    89,    87,    88,    86,    90,
    91,    95,    96,    98,    97,    93,    94,    99,   100,   nil,
   nil,   nil,   117,    92,    89,    87,    88,    86,    90,    91,
    95,    96,    98,    97,    93,   nil,   nil,   117,    92,    89,
    87,    88,    86,    90,    91,   -72,   -72,   -72,   -72,   nil,
   134,    92,    89,    87,    88,    86,    90,    91,    95,    96,
    98,    97,    93,    94,    99,   100,    22,   nil,   nil,    48,
   nil,    16,    17,   nil,   nil,   nil,   nil,    35,    48,   nil,
   nil,    32,    48,   145,    34,    33,   146,   107,   nil,   nil,
   nil,    31,   148,   nil,    31,   nil,    46,    29,    30,    28,
    29,    30,    28,    31,   nil,   nil,   nil,    31,   nil,    29,
    30,    28,    22,    29,    30,    28,   nil,    16,    17,   nil,
   nil,   nil,     7,    35,     8,   nil,   nil,    32,   nil,   nil,
    34,    33,   nil,   nil,   nil,    22,   nil,    31,   nil,   nil,
    16,    17,   nil,    29,    30,    28,    35,    48,   nil,   nil,
    32,   nil,   nil,    34,    33,   nil,   nil,   nil,    22,   nil,
    31,   160,   nil,    16,    17,   nil,    29,    30,    28,    35,
    48,   nil,    31,    32,   nil,   nil,    34,    33,    29,    30,
    28,    22,   nil,    31,   162,   nil,    16,    17,   nil,    29,
    30,    28,    35,    48,   nil,    31,    32,   nil,   nil,    34,
    33,    29,    30,    28,    22,   nil,    31,   166,   nil,    16,
    17,   nil,    29,    30,    28,    35,   nil,   nil,    31,    32,
   nil,   nil,    34,    33,    29,    30,    28,   nil,    22,    31,
   nil,   nil,   nil,    16,    17,    29,    30,    28,     7,    35,
     8,   nil,   nil,    32,   nil,   nil,    34,    33,   nil,   nil,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,    29,
    30,    28,    92,    89,    87,    88,    86,    90,    91,    95,
    96,    98,    97,    93,    94,    99,   100,    92,    89,    87,
    88,    86,    90,    91,    95,    96,    98,    97,    93,    94,
    99,   100,   nil,   101,   109,    92,    89,    87,    88,    86,
    90,    91,    95,    96,    98,    97,    93,    94,    99,   100,
   nil,   105,    92,    89,    87,    88,    86,    90,    91,    95,
    96,    98,    97,    93,    94,    99,   100,   nil,   106,    92,
    89,    87,    88,    86,    90,    91,    95,    96,    98,    97,
    93,    94,    99,   100,    92,    89,    87,    88,    86,    90,
    91,    95,    96,    98,    97,    93,    94,    99,   100,    92,
    89,    87,    88,    86,    90,    91,    95,    96,    98,    97,
    93,    94,    99,   100,    92,    89,    87,    88,    86,    90,
    91,   -72,   -72,   -72,   -72,    92,    89,    87,    88,    86,
    90,    91,    95,    96,    98,    97,    92,    89,    87,    88,
    86,    90,    91,   -72,   -72,   -72,   -72,    92,    89,    87,
    88,    86,    90,    91,   -72,   -72,   -72,   -72 ]

racc_action_check = [
    88,     0,    96,    74,    64,    74,    42,     2,    88,     2,
    96,    83,    64,    13,    13,    63,    43,     9,     0,     9,
    13,   108,    88,    63,    96,    88,    64,    96,    46,    64,
    88,    88,    96,    96,    64,    64,    36,    63,    42,   112,
    63,    21,    21,   140,   140,    63,    63,    62,    48,    88,
    35,    96,   118,    64,    95,    62,   124,   124,   124,   124,
   124,    49,    95,    52,    63,    33,    88,    97,    96,    62,
    64,    28,    62,     7,     7,    97,    95,    62,    62,    95,
    51,    63,   113,   113,    95,    95,    23,    50,    51,    97,
    37,    37,    97,    22,    44,    50,    62,    97,    97,    20,
    98,    15,    51,    95,    70,    51,    12,   136,    98,    50,
    51,    51,    50,    62,    10,    72,    97,    50,    50,   139,
    95,    73,    98,   141,    75,    98,    99,   145,     6,    51,
    98,    98,   147,    97,    99,   148,    50,   100,   149,    87,
   123,   123,   123,   123,   123,   100,    51,    87,    99,    98,
     5,    99,    86,    50,     4,   156,    99,    99,     3,   100,
    86,    87,   100,   160,    87,    94,    98,   100,   100,    87,
    87,    78,   162,    94,    86,    99,     1,    86,   166,   nil,
   nil,   nil,    86,    86,   nil,    90,   100,    94,    87,   nil,
    94,   nil,    99,    90,   nil,    94,    94,   nil,   117,   nil,
   nil,    86,   nil,   100,   nil,    87,   117,    90,   nil,   nil,
    90,    91,   nil,    89,    94,    90,    90,   nil,    86,    91,
   117,    89,   nil,   117,    92,   nil,   nil,   nil,   117,   117,
   nil,    94,    92,    91,    90,    89,    91,   nil,    89,   nil,
   nil,    91,    91,    89,    89,    29,    92,   117,   nil,    92,
   nil,    90,   nil,    29,    92,    92,   nil,   nil,    30,   nil,
    91,   nil,    89,   nil,   117,   nil,    30,    29,   nil,   nil,
    29,   nil,   nil,    92,    34,    29,    29,    91,    32,    89,
    30,   nil,    34,    30,   nil,   nil,    32,   138,    30,    30,
    92,   nil,   nil,   nil,    29,   nil,    34,   nil,   nil,    34,
    32,   138,   nil,    32,    34,    34,    93,    30,    32,    32,
   nil,    29,   138,   nil,    93,   nil,   nil,    31,   138,   138,
   138,   nil,   nil,    34,    30,    31,   nil,    32,    93,   nil,
   nil,    93,   nil,   nil,   nil,    31,    93,    93,   nil,    31,
    34,   nil,    31,   nil,    32,   107,   nil,    31,    31,   nil,
   107,   107,   nil,   nil,   nil,    93,   107,   nil,   nil,   nil,
   107,   nil,   nil,   107,   107,   nil,    31,   nil,   nil,   nil,
   107,   nil,    93,   nil,   nil,   nil,   107,   107,   107,   nil,
   nil,   nil,   nil,    31,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   104,   104,   104,   nil,
   nil,   nil,    82,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   nil,   nil,   142,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   nil,
   104,    69,    69,    69,    69,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,   109,   nil,   nil,   135,
   nil,   109,   109,   nil,   nil,   nil,   nil,   109,   137,   nil,
   nil,   109,    19,   135,   109,   109,   135,    69,   nil,   nil,
   nil,   109,   137,   nil,   135,   nil,    19,   109,   109,   109,
   135,   135,   135,   137,   nil,   nil,   nil,    19,   nil,   137,
   137,   137,     8,    19,    19,    19,   nil,     8,     8,   nil,
   nil,   nil,     8,     8,     8,   nil,   nil,     8,   nil,   nil,
     8,     8,   nil,   nil,   nil,   110,   nil,     8,   nil,   nil,
   110,   110,   nil,     8,     8,     8,   110,   155,   nil,   nil,
   110,   nil,   nil,   110,   110,   nil,   nil,   nil,   146,   nil,
   110,   155,   nil,   146,   146,   nil,   110,   110,   110,   146,
   159,   nil,   155,   146,   nil,   nil,   146,   146,   155,   155,
   155,   150,   nil,   146,   159,   nil,   150,   150,   nil,   146,
   146,   146,   150,   164,   nil,   159,   150,   nil,   nil,   150,
   150,   159,   159,   159,   161,   nil,   150,   164,   nil,   161,
   161,   nil,   150,   150,   150,   161,   nil,   nil,   164,   161,
   nil,   nil,   161,   161,   164,   164,   164,   nil,    39,   161,
   nil,   nil,   nil,    39,    39,   161,   161,   161,    39,    39,
    39,   nil,   nil,    39,   nil,   nil,    39,    39,   nil,   nil,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,    39,
    39,    39,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,   nil,    61,    71,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
   nil,    65,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,   nil,    66,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128 ]

racc_action_pointer = [
   -30,   176,   -27,   127,   130,   150,    90,    44,   498,   -17,
    63,   nil,    86,   -16,   nil,    77,   nil,   nil,   nil,   468,
    61,    12,    42,    67,   nil,   nil,   nil,   nil,    47,   243,
   256,   315,   276,    41,   272,    23,    -2,    61,   nil,   614,
   nil,   nil,   -14,    -4,    75,   nil,     8,   nil,    -3,    41,
    85,    78,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   683,    45,    13,     2,   701,   718,   nil,   nil,   457,
    60,   668,    78,   101,   -47,   100,   nil,   nil,   147,   nil,
   nil,   nil,   380,   -39,   735,   nil,   150,   137,    -2,   211,
   183,   209,   222,   304,   163,    52,     0,    65,    98,   124,
   135,   nil,   nil,   nil,   410,   nil,   nil,   321,    -6,   452,
   521,   nil,   -14,    53,   nil,   nil,   nil,   196,    32,   nil,
   nil,   nil,   nil,   136,    52,   nil,   791,   429,   813,   802,
   780,   444,   765,   750,   nil,   455,    62,   464,   263,    72,
    14,    99,   395,   nil,   nil,   107,   544,   105,   115,   118,
   567,   nil,   nil,   nil,   nil,   533,   119,   nil,   nil,   556,
   143,   590,   152,   nil,   579,   nil,   158,   nil ]

racc_action_default = [
   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   168,   -72,   -72,    -7,   -72,   -23,   -24,    -4,   -72,
   -72,   -49,   -14,   -72,   -44,   -45,   -46,   -47,   -72,   -72,
   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,    -1,   -72,
    -8,    -9,   -72,   -72,   -12,   -14,   -72,   -48,   -72,   -72,
   -57,   -72,   -72,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -25,   -72,   -72,   -72,   -72,   -72,   -72,   -54,   -55,   -72,
   -72,   -72,   -72,   -72,   -72,   -72,    -3,   -10,   -72,   -11,
    -5,    -6,   -59,   -72,   -15,   -50,   -72,   -72,   -72,   -72,
   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   -51,   -33,   -34,   -72,   -52,   -56,   -72,   -72,   -72,
   -72,    -2,   -68,   -72,   -70,   -13,   -58,   -72,   -72,   -26,
   -27,   -28,   -29,   -30,   -31,   -32,   -35,   -36,   -37,   -38,
   -39,   -40,   -41,   -42,   -43,   -72,   -72,   -72,   -72,   -72,
   -72,   -72,   -59,   -53,   -61,   -72,   -72,   -72,   -72,   -72,
   -72,   -69,   -71,   -60,   -62,   -72,   -72,   -65,   -66,   -72,
   -72,   -72,   -72,   -63,   -72,   -67,   -72,   -64 ]

racc_goto_table = [
    23,    47,    75,   116,    18,     6,    43,    44,    40,    42,
    41,   135,    36,   137,   138,    13,    40,     3,    83,    67,
     1,   144,    74,   139,   nil,    70,   nil,    61,    65,    66,
    69,    23,    71,   nil,   nil,    76,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    84,
   155,   nil,   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,
   102,   103,   104,   153,   nil,   164,   nil,   114,   nil,   nil,
   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   141,   nil,
   nil,   nil,   nil,   nil,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,    23,
   nil,    23,    23,   nil,   nil,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   142,   nil,    47,   nil,    47,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   152,   nil,   nil,   nil,    47,    23,   nil,
   nil,    47,    23,   nil,   nil,   nil,    47,   nil,   nil,   nil,
   nil,   nil,   nil,    23 ]

racc_goto_check = [
    12,    17,     8,    22,     5,     2,    11,    12,     7,    10,
     9,     6,     2,     6,     6,     4,     7,     3,    20,    21,
     1,    23,    24,    25,   nil,    12,   nil,    13,    13,    13,
    13,    12,    13,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    13,
     6,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
    13,    13,    13,    22,   nil,     6,   nil,    12,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    12,
   nil,    12,    12,   nil,   nil,     8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    13,   nil,    17,   nil,    17,
    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,    17,    12,   nil,
   nil,    17,    12,   nil,   nil,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    20,     3,    17,     8,    -4,   -96,    -5,   -35,    -5,
    -6,    -9,    -8,    -2,   nil,   nil,   nil,   -18,   nil,   nil,
   -32,   -12,   -79,  -114,   -15,   -89 ]

racc_goto_default = [
   nil,   nil,    20,   nil,    21,   nil,    19,    14,    15,   nil,
   nil,    25,    55,   nil,    60,    53,    54,    24,    26,    27,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 70, :_reduce_1,
  5, 70, :_reduce_2,
  4, 71, :_reduce_3,
  2, 71, :_reduce_4,
  3, 74, :_reduce_5,
  3, 74, :_reduce_6,
  1, 73, :_reduce_7,
  2, 73, :_reduce_8,
  2, 76, :_reduce_9,
  2, 78, :_reduce_10,
  2, 78, :_reduce_11,
  1, 79, :_reduce_12,
  3, 79, :_reduce_13,
  1, 81, :_reduce_14,
  3, 80, :_reduce_15,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 85, :_reduce_19,
  1, 85, :_reduce_20,
  1, 84, :_reduce_21,
  1, 84, :_reduce_22,
  1, 77, :_reduce_23,
  1, 77, :_reduce_24,
  1, 82, :_reduce_25,
  3, 82, :_reduce_26,
  3, 82, :_reduce_27,
  3, 82, :_reduce_28,
  3, 82, :_reduce_29,
  3, 82, :_reduce_30,
  3, 82, :_reduce_31,
  3, 82, :_reduce_32,
  2, 82, :_reduce_33,
  2, 82, :_reduce_34,
  3, 82, :_reduce_35,
  3, 82, :_reduce_36,
  3, 82, :_reduce_37,
  3, 82, :_reduce_38,
  3, 82, :_reduce_39,
  3, 82, :_reduce_40,
  3, 82, :_reduce_41,
  3, 82, :_reduce_42,
  3, 82, :_reduce_43,
  1, 75, :_reduce_44,
  1, 75, :_reduce_45,
  1, 75, :_reduce_46,
  1, 75, :_reduce_47,
  2, 75, :_reduce_48,
  1, 75, :_reduce_49,
  3, 86, :_reduce_none,
  3, 86, :_reduce_51,
  3, 86, :_reduce_52,
  5, 86, :_reduce_53,
  2, 86, :_reduce_54,
  1, 90, :_reduce_none,
  2, 90, :_reduce_56,
  0, 89, :_reduce_57,
  2, 89, :_reduce_58,
  0, 91, :_reduce_59,
  3, 91, :_reduce_60,
  5, 87, :_reduce_61,
  2, 92, :_reduce_none,
  4, 92, :_reduce_63,
  10, 88, :_reduce_64,
  6, 88, :_reduce_65,
  6, 88, :_reduce_66,
  10, 72, :_reduce_67,
  0, 94, :_reduce_none,
  2, 94, :_reduce_69,
  2, 93, :_reduce_70,
  4, 93, :_reduce_71 ]

racc_reduce_n = 72

racc_shift_n = 168

racc_token_table = {
  false => 0,
  :error => 1,
  Not => 2,
  :UMINUS => 3,
  Multip => 4,
  DivisionEx => 5,
  RestoEx => 6,
  DivisionEnt => 7,
  RestoEnt => 8,
  Suma => 9,
  Resta => 10,
  Less => 11,
  LessOrEqual => 12,
  GreaterOrEqual => 13,
  Greater => 14,
  And => 15,
  Or => 16,
  Equivalence => 17,
  Difference => 18,
  Equal => 19,
  Semicolon => 20,
  Types => 21,
  Signs => 22,
  NumeralLit => 23,
  Identifier => 24,
  ReservedWords => 25,
  Strings => 26,
  Ints => 27,
  InstMovi => 28,
  Number => 29,
  Bool => 30,
  Program => 31,
  True => 32,
  False => 33,
  With => 34,
  Repeat => 35,
  Do => 36,
  Times => 37,
  End => 38,
  If => 39,
  Then => 40,
  Else => 41,
  While => 42,
  For => 43,
  From => 44,
  To => 45,
  By => 46,
  Begin => 47,
  Func => 48,
  Return => 49,
  CurlyBracketR => 50,
  CurlyBracketL => 51,
  Comma => 52,
  Arrow => 53,
  Comillas => 54,
  Write => 55,
  Writeln => 56,
  Read => 57,
  Comments => 58,
  Forward => 59,
  Arc => 60,
  SetPosition => 61,
  RotateR => 62,
  RotateL => 63,
  Backward => 64,
  CloseEye => 65,
  OpenEye => 66,
  Home => 67,
  Floats => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Not",
  "UMINUS",
  "Multip",
  "DivisionEx",
  "RestoEx",
  "DivisionEnt",
  "RestoEnt",
  "\"+\"",
  "Resta",
  "Less",
  "LessOrEqual",
  "GreaterOrEqual",
  "Greater",
  "And",
  "Or",
  "Equivalence",
  "Difference",
  "Equal",
  "Semicolon",
  "Types",
  "Signs",
  "NumeralLit",
  "Identifier",
  "ReservedWords",
  "Strings",
  "Ints",
  "InstMovi",
  "Number",
  "Bool",
  "Program",
  "True",
  "False",
  "With",
  "Repeat",
  "Do",
  "Times",
  "End",
  "If",
  "Then",
  "Else",
  "While",
  "For",
  "From",
  "To",
  "By",
  "Begin",
  "Func",
  "Return",
  "CurlyBracketR",
  "CurlyBracketL",
  "Comma",
  "Arrow",
  "Comillas",
  "Write",
  "Writeln",
  "Read",
  "Comments",
  "Forward",
  "Arc",
  "SetPosition",
  "RotateR",
  "RotateL",
  "Backward",
  "CloseEye",
  "OpenEye",
  "Home",
  "Floats",
  "$start",
  "S",
  "InstBlq",
  "Declfuncion",
  "ListDecl",
  "InstBlq1",
  "ListInst",
  "Decl",
  "Type",
  "Decl1",
  "ListId",
  "Asig",
  "Var",
  "Expr",
  "Term",
  "Boolean",
  "Num",
  "inst",
  "Conditional",
  "Loop",
  "InstMovi1",
  "Rreturn",
  "InstMovi2",
  "Cond1",
  "ListArg",
  "Firm" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'retina_parser.y', 94)
  def _reduce_1(val, _values, result)
    result = S.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 95)
  def _reduce_2(val, _values, result)
    result = S.new(val[0],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 100)
  def _reduce_3(val, _values, result)
    result = InstBlq.new(val[3],val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 101)
  def _reduce_4(val, _values, result)
    result = InstBlq.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 106)
  def _reduce_5(val, _values, result)
    result = InstBlq1.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 107)
  def _reduce_6(val, _values, result)
    result = InstBlq1.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 112)
  def _reduce_7(val, _values, result)
    result = ListDecl.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 113)
  def _reduce_8(val, _values, result)
    result = ListDecl.new(val[1], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 118)
  def _reduce_9(val, _values, result)
    result = Decl.new(val[1], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 123)
  def _reduce_10(val, _values, result)
    result = Decl1.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 124)
  def _reduce_11(val, _values, result)
    result = Decl1.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 129)
  def _reduce_12(val, _values, result)
    result = ListId.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 130)
  def _reduce_13(val, _values, result)
    result = ListId.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 135)
  def _reduce_14(val, _values, result)
    result = Term.new(:IDENTIFIER , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 140)
  def _reduce_15(val, _values, result)
    result = Asig.new(:Var,val[0],:Expr val[2])
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'retina_parser.y', 153)
  def _reduce_19(val, _values, result)
    result = Term.new(:Ints , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 154)
  def _reduce_20(val, _values, result)
    result = Term.new(:Floats , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 159)
  def _reduce_21(val, _values, result)
    result = Term.new(:True , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 160)
  def _reduce_22(val, _values, result)
    result = Term.new(:False , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 165)
  def _reduce_23(val, _values, result)
    result = :Number
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 166)
  def _reduce_24(val, _values, result)
    result = :Bool
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 171)
  def _reduce_25(val, _values, result)
    result = Term.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 172)
  def _reduce_26(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 173)
  def _reduce_27(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 174)
  def _reduce_28(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 175)
  def _reduce_29(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 176)
  def _reduce_30(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 177)
  def _reduce_31(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 178)
  def _reduce_32(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 179)
  def _reduce_33(val, _values, result)
    result = UnOp.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 180)
  def _reduce_34(val, _values, result)
    result = UnOp.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 181)
  def _reduce_35(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 182)
  def _reduce_36(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 183)
  def _reduce_37(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 184)
  def _reduce_38(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 185)
  def _reduce_39(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 186)
  def _reduce_40(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 187)
  def _reduce_41(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 188)
  def _reduce_42(val, _values, result)
    result = BinOp.new(val[2], val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 189)
  def _reduce_43(val, _values, result)
    result = ParenEx.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 194)
  def _reduce_44(val, _values, result)
    result = ListInst.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 195)
  def _reduce_45(val, _values, result)
    result = ListInst.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 196)
  def _reduce_46(val, _values, result)
    result = ListInst.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 197)
  def _reduce_47(val, _values, result)
    result = ListInst.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 198)
  def _reduce_48(val, _values, result)
    result = ListInst.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 199)
  def _reduce_49(val, _values, result)
    result = ListInst.new(val[0])
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'retina_parser.y', 205)
  def _reduce_51(val, _values, result)
     result = Inst.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 206)
  def _reduce_52(val, _values, result)
     result = Inst.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 207)
  def _reduce_53(val, _values, result)
     result = Inst.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 208)
  def _reduce_54(val, _values, result)
    result = Inst.new(val[1])
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'retina_parser.y', 214)
  def _reduce_56(val, _values, result)
    result = Rreturn.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 219)
  def _reduce_57(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 220)
  def _reduce_58(val, _values, result)
     result = InstMovi1.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 225)
  def _reduce_59(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 226)
  def _reduce_60(val, _values, result)
     result = InstMovi2.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 231)
  def _reduce_61(val, _values, result)
     result = Conditional.new(val[1], val[3], val[4]) 
    result
  end
.,.,

# reduce 62 omitted

module_eval(<<'.,.,', 'retina_parser.y', 237)
  def _reduce_63(val, _values, result)
     result = Cond1.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 242)
  def _reduce_64(val, _values, result)
    result = Loop.new(val[1], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 243)
  def _reduce_65(val, _values, result)
     result = Loop.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 244)
  def _reduce_66(val, _values, result)
     result = Loop.new(val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 249)
  def _reduce_67(val, _values, result)
     result = DeclFunc.new(val[1],val[3], val[5],val[7])
    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'retina_parser.y', 255)
  def _reduce_69(val, _values, result)
     result = Firm.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 260)
  def _reduce_70(val, _values, result)
     result = ListArg.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 261)
  def _reduce_71(val, _values, result)
     result = ListArg.new(val[0], val[2], val[3])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
